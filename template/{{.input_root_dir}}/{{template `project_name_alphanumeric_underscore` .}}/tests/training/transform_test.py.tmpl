import pytest
import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline


@pytest.fixture
def sample_data_with_missing():
    """Create sample data with missing values for testing preprocessing"""
    np.random.seed(42)
    n_samples = 100
    
    data = pd.DataFrame({
        'feature_1': np.random.randn(n_samples),
        'feature_2': np.random.randn(n_samples),
        'categorical_1': np.random.choice(['A', 'B', 'C', np.nan], n_samples),
        'categorical_2': np.random.choice(['X', 'Y', 'NA'], n_samples),
        'target': np.random.randint(0, 2, n_samples)
    })
    
    return data


def test_missing_value_imputation(sample_data_with_missing):
    """Test missing value imputation strategy"""
    data = sample_data_with_missing.copy()
    
    # Simulate the "exactly-equal" imputation strategy
    for col in ['categorical_1', 'categorical_2']:
        mask = data[col].isna() | (data[col] == 'NA')
        n_missing = mask.sum()
        
        if n_missing > 0:
            # Get existing categories
            existing_cats = data.loc[~mask, col].unique()
            k = len(existing_cats)
            
            if k > 0:
                # Create assignments for missing values
                base = n_missing // k
                rem = n_missing % k
                
                assignments = np.repeat(existing_cats, base)
                if rem:
                    assignments = np.concatenate([assignments, existing_cats[:rem]])
                
                np.random.shuffle(assignments)
                data.loc[mask, col] = assignments
    
    # Assertions
    assert not data['categorical_1'].isna().any()
    assert not (data['categorical_2'] == 'NA').any()


def test_categorical_encoding_pipeline(sample_data_with_missing):
    """Test the categorical encoding pipeline"""
    data = sample_data_with_missing.copy()
    
    # Define categorical features
    categorical_features = ['categorical_1', 'categorical_2']
    
    # Create ColumnTransformer
    preprocessor = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ],
        remainder='passthrough'
    )
    
    # Fit and transform
    X = data.drop('target', axis=1)
    X_encoded = preprocessor.fit_transform(X)
    
    # Assertions
    assert X_encoded.shape[0] == X.shape[0]
    assert X_encoded.shape[1] >= X.shape[1]  # More features due to encoding


def test_target_encoding_pipeline(sample_data_with_missing):
    """Test target variable encoding pipeline"""
    data = sample_data_with_missing.copy()
    
    # Encode target variable
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(data['target'])
    
    # Assertions
    assert len(y_encoded) == len(data['target'])
    assert set(y_encoded) <= {0, 1}
    assert len(label_encoder.classes_) == 2


def test_preprocessing_pipeline_integration(sample_data_with_missing):
    """Test the complete preprocessing pipeline integration"""
    data = sample_data_with_missing.copy()
    
    # Separate features and target
    X = data.drop('target', axis=1)
    y = data['target']
    
    # Create preprocessing pipeline
    preprocessor = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(handle_unknown='ignore'), ['categorical_1', 'categorical_2'])
        ],
        remainder='passthrough'
    )
    
    # Create complete pipeline
    pipeline = Pipeline([
        ('preprocessor', preprocessor)
    ])
    
    # Fit and transform
    X_processed = pipeline.fit_transform(X)
    
    # Assertions
    assert X_processed.shape[0] == X.shape[0]
    assert callable(getattr(pipeline, "fit", None))
    assert callable(getattr(pipeline, "transform", None))
    assert callable(getattr(pipeline, "fit_transform", None))
