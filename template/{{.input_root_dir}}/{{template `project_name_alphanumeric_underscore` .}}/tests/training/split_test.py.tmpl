import pytest
import pandas as pd
import numpy as np
from pandas import DataFrame
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer


@pytest.fixture
def sample_preprocessed_data():
    """Create sample data that mimics the preprocessed data structure"""
    np.random.seed(42)
    n_samples = 100
    n_features = 5
    
    # Create sample data with mixed types
    data = pd.DataFrame({
        'feature_1': np.random.randn(n_samples),
        'feature_2': np.random.randn(n_samples),
        'categorical_1': np.random.choice(['A', 'B', 'C'], n_samples),
        'categorical_2': np.random.choice(['X', 'Y'], n_samples),
        'target': np.random.randint(0, 2, n_samples)
    })
    
    return data


def test_train_test_split_structure(sample_preprocessed_data):
    """Test that train/test split produces correct data structures"""
    data = sample_preprocessed_data
    
    # Separate features and target
    X = data.drop('target', axis=1)
    y = data['target']
    
    # Perform train/test split
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    # Assertions
    assert isinstance(X_train, DataFrame)
    assert isinstance(X_test, DataFrame)
    assert isinstance(y_train, pd.Series)
    assert isinstance(y_test, pd.Series)
    
    # Check shapes
    assert len(X_train) + len(X_test) == len(data)
    assert len(y_train) + len(y_test) == len(data)
    assert X_train.shape[1] == X_test.shape[1]  # Same number of features


def test_categorical_encoding(sample_preprocessed_data):
    """Test categorical feature encoding functionality"""
    data = sample_preprocessed_data
    
    # Identify categorical features
    categorical_features = ['categorical_1', 'categorical_2']
    numerical_features = ['feature_1', 'feature_2']
    
    # Create preprocessor
    preprocessor = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ],
        remainder='passthrough'
    )
    
    # Fit and transform
    X = data.drop('target', axis=1)
    X_encoded = preprocessor.fit_transform(X)
    
    # Assertions
    assert X_encoded.shape[0] == X.shape[0]  # Same number of samples
    assert X_encoded.shape[1] >= X.shape[1]  # More features due to encoding


def test_target_encoding(sample_preprocessed_data):
    """Test target variable encoding"""
    data = sample_preprocessed_data
    
    # Encode target variable
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(data['target'])
    
    # Assertions
    assert len(y_encoded) == len(data['target'])
    assert set(y_encoded) <= {0, 1}  # Binary classification
    assert len(label_encoder.classes_) == 2


def test_preprocessed_data_structure(sample_preprocessed_data):
    """Test the structure of preprocessed data dictionary"""
    data = sample_preprocessed_data
    
    # Simulate the preprocessing pipeline
    X = data.drop('target', axis=1)
    y = data['target']
    
    # Split data
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    # Create preprocessed data structure (similar to what's saved in pickle)
    preprocessed_data = {
        'X_train': X_train,
        'X_test': X_test,
        'y_train': y_train,
        'y_test': y_test,
        'feature_names': X_train.columns.tolist(),
        'categorical_features': ['categorical_1', 'categorical_2'],
        'target_column': 'target'
    }
    
    # Assertions
    assert isinstance(preprocessed_data, dict)
    assert 'X_train' in preprocessed_data
    assert 'X_test' in preprocessed_data
    assert 'y_train' in preprocessed_data
    assert 'y_test' in preprocessed_data
    assert 'feature_names' in preprocessed_data
    assert 'categorical_features' in preprocessed_data
    assert 'target_column' in preprocessed_data
    
    # Check data types
    assert isinstance(preprocessed_data['X_train'], DataFrame)
    assert isinstance(preprocessed_data['X_test'], DataFrame)
    assert isinstance(preprocessed_data['y_train'], pd.Series)
    assert isinstance(preprocessed_data['y_test'], pd.Series)
    assert isinstance(preprocessed_data['feature_names'], list)
    assert isinstance(preprocessed_data['categorical_features'], list)
    assert isinstance(preprocessed_data['target_column'], str)
