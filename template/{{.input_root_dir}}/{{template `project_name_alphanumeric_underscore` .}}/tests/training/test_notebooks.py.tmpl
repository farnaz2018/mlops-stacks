import pathlib
import pytest


def test_notebook_format():
    """Test that all Databricks notebooks have the required header"""
    # Verify that all Databricks notebooks have the required header
    paths = list(pathlib.Path("./notebooks").glob("**/*.py"))
    for f in paths:
        notebook_str = open(str(f)).read()
        assert notebook_str.startswith("# Databricks notebook source")


def test_training_notebooks_exist():
    """Test that all required training notebooks exist"""
    required_notebooks = [
        "Ingest_data.py",
        "Preprocess.py", 
        "Train.py"
    ]
    
    notebook_dir = pathlib.Path("./notebooks")
    existing_notebooks = [f.name for f in notebook_dir.glob("*.py")]
    
    for notebook in required_notebooks:
        assert notebook in existing_notebooks, f"Required notebook {notebook} not found"


def test_notebook_content_structure():
    """Test that notebooks have expected content structure"""
    notebook_dir = pathlib.Path("./notebooks")
    
    # Test Ingest_data.py structure
    ingest_path = notebook_dir / "Ingest_data.py"
    if ingest_path.exists():
        content = ingest_path.read_text()
        assert "spark.table" in content, "Ingest notebook should contain Spark table operations"
        assert "LEFT JOIN" in content, "Ingest notebook should contain SQL JOIN operations"
    
    # Test Preprocess.py structure
    preprocess_path = notebook_dir / "Preprocess.py"
    if preprocess_path.exists():
        content = preprocess_path.read_text()
        assert "RandomForestClassifier" in content or "train_test_split" in content, "Preprocess notebook should contain ML operations"
        assert "joblib.dump" in content, "Preprocess notebook should save preprocessed data"
    
    # Test Train.py structure
    train_path = notebook_dir / "Train.py"
    if train_path.exists():
        content = train_path.read_text()
        assert "RandomForestClassifier" in content, "Train notebook should contain Random Forest classifier"
        assert "mlflow.sklearn.log_model" in content, "Train notebook should log model to MLflow"


def test_validation_notebooks_exist():
    """Test that validation notebooks exist"""
    validation_dir = pathlib.Path("../validation/notebooks")
    if validation_dir.exists():
        validation_notebooks = [f.name for f in validation_dir.glob("*.py")]
        assert "ModelValidation.py" in validation_notebooks, "ModelValidation.py should exist"


def test_exploratory_notebooks_exist():
    """Test that exploratory notebooks exist"""
    exploratory_dir = pathlib.Path("../exploratory")
    if exploratory_dir.exists():
        exploratory_notebooks = [f.name for f in exploratory_dir.glob("*.py")]
        assert "Exploratory.py" in exploratory_notebooks, "Exploratory.py should exist"
        assert "Validate_exploratory.py" in exploratory_notebooks, "Validate_exploratory.py should exist"
