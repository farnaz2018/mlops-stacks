import pytest
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report


@pytest.fixture
def sample_classification_data():
    """Create sample classification data for testing Random Forest"""
    np.random.seed(42)
    n_samples = 100
    n_features = 5
    
    # Generate synthetic classification data
    X = np.random.randn(n_samples, n_features)
    y = np.random.randint(0, 2, n_samples)  # Binary classification
    
    return pd.DataFrame(X, columns=[f'feature_{i}' for i in range(n_features)]), y


def test_random_forest_classifier_initialization():
    """Test that Random Forest classifier can be initialized with correct parameters"""
    rf = RandomForestClassifier(
        random_state=42,
        n_estimators=100,
        class_weight='balanced',
        max_depth=10,
        min_samples_split=2,
        min_samples_leaf=1
    )
    
    assert rf.random_state == 42
    assert rf.n_estimators == 100
    assert rf.class_weight == 'balanced'
    assert rf.max_depth == 10
    assert rf.min_samples_split == 2
    assert rf.min_samples_leaf == 1


def test_random_forest_training_and_prediction(sample_classification_data):
    """Test Random Forest training and prediction functionality"""
    X, y = sample_classification_data
    
    # Split data
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    # Initialize and train model
    rf = RandomForestClassifier(random_state=42, n_estimators=50)
    rf.fit(X_train, y_train)
    
    # Make predictions
    predictions = rf.predict(X_test)
    probabilities = rf.predict_proba(X_test)
    
    # Assertions
    assert len(predictions) == len(y_test)
    assert predictions.shape == y_test.shape
    assert probabilities.shape == (len(y_test), 2)  # Binary classification
    assert np.allclose(probabilities.sum(axis=1), 1.0)  # Probabilities sum to 1
    
    # Test accuracy
    accuracy = accuracy_score(y_test, predictions)
    assert 0 <= accuracy <= 1


def test_random_forest_feature_importance(sample_classification_data):
    """Test that Random Forest provides feature importance"""
    X, y = sample_classification_data
    
    rf = RandomForestClassifier(random_state=42, n_estimators=50)
    rf.fit(X, y)
    
    # Check feature importance
    assert hasattr(rf, 'feature_importances_')
    assert len(rf.feature_importances_) == X.shape[1]
    assert np.all(rf.feature_importances_ >= 0)
    assert np.isclose(np.sum(rf.feature_importances_), 1.0)


def test_random_forest_model_attributes(sample_classification_data):
    """Test that Random Forest model has required attributes"""
    X, y = sample_classification_data
    
    rf = RandomForestClassifier(random_state=42)
    rf.fit(X, y)
    
    # Check required methods
    assert callable(getattr(rf, "fit", None))
    assert callable(getattr(rf, "predict", None))
    assert callable(getattr(rf, "predict_proba", None))
    
    # Check required attributes
    assert hasattr(rf, 'feature_importances_')
    assert hasattr(rf, 'n_estimators')
    assert hasattr(rf, 'random_state')
